#!/bin/bash

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Function to create backup of existing files
backup_if_exists() {
    if [ -e "$1" ]; then
        if [ ! -L "$1" ]; then
            echo -e "${YELLOW}Backing up $1 to $1.backup${NC}"
            mv "$1" "$1.backup"
        else
            echo -e "${YELLOW}Removing existing symlink $1${NC}"
            rm "$1"
        fi
    fi
}

# Function to create symlinks
link_file() {
    local src="$1"
    local dst="$2"

    echo -e "Linking ${GREEN}$src${NC} to ${GREEN}$dst${NC}"
    backup_if_exists "$dst"
    ln -sf "$src" "$dst"
}

echo -e "${GREEN}Installing dotfiles...${NC}"

# Create necessary directories
mkdir -p "$HOME/.config"
mkdir -p "$HOME/.local/bin"

# Create a setup script that will be sourced on Codespace startup
SETUP_SCRIPT="$HOME/.dotfiles_setup"
echo "#!/bin/bash" > "$SETUP_SCRIPT"
echo "" >> "$SETUP_SCRIPT"
echo "# This file is automatically generated by dotfiles installer" >> "$SETUP_SCRIPT"
echo "# It contains setup code for all dotfiles directories" >> "$SETUP_SCRIPT"
echo "" >> "$SETUP_SCRIPT"

# Process all directories in the dotfiles repository
for dir in "$DOTFILES_DIR"/*/ ; do
    if [ -d "$dir" ]; then
        dir_name=$(basename "$dir")
        echo -e "${GREEN}Processing directory: $dir_name${NC}"

        # Handle special directories first
        case "$dir_name" in
            "bash")
                # Link bash configuration files
                if [ -f "$dir/bashrc" ]; then
                    link_file "$dir/bashrc" "$HOME/.bashrc"
                fi
                if [ -f "$dir/bash_profile" ]; then
                    link_file "$dir/bash_profile" "$HOME/.bash_profile"
                fi
                if [ -f "$dir/bash_aliases" ]; then
                    link_file "$dir/bash_aliases" "$HOME/.bash_aliases"
                fi
                ;;

            "vim" | "nvim")
                # Link vim/nvim configuration
                if [ -f "$dir/vimrc" ]; then
                    link_file "$dir/vimrc" "$HOME/.vimrc"
                fi
                if [ -f "$dir/init.vim" ]; then
                    mkdir -p "$HOME/.config/nvim"
                    link_file "$dir/init.vim" "$HOME/.config/nvim/init.vim"
                fi
                if [ -d "$dir/vim" ]; then
                    link_file "$dir/vim" "$HOME/.vim"
                fi
                ;;

            "git")
                # Link git configuration
                if [ -f "$dir/gitconfig" ]; then
                    link_file "$dir/gitconfig" "$HOME/.gitconfig"
                fi
                ;;

            "pymol")
                # Link pymol configuration
                mkdir -p "$HOME/.pymol"
                if [ -f "$dir/pymolrc" ]; then
                    link_file "$dir/pymolrc" "$HOME/.pymol/pymolrc"
                fi
                ;;

            "bin")
                # Link executable files to ~/.local/bin
                for executable in "$dir"/* ; do
                    if [ -f "$executable" ]; then
                        base_name=$(basename "$executable")
                        link_file "$executable" "$HOME/.local/bin/$base_name"
                        chmod +x "$HOME/.local/bin/$base_name"
                    fi
                done
                ;;

            "config")
                # Link ALL files/directories in config to .config directory
                for config_item in "$dir"/* ; do
                    if [ -e "$config_item" ]; then
                        base_name=$(basename "$config_item")
                        link_file "$config_item" "$HOME/.config/$base_name"
                    fi
                done
                ;;

            *)
                # For all other directories, determine the appropriate location
                echo "# Setup for $dir_name" >> "$SETUP_SCRIPT"

                # If there's a setup.sh in the directory, source it
                if [ -f "$dir/setup.sh" ]; then
                    echo "source \"$dir/setup.sh\"" >> "$SETUP_SCRIPT"
                fi

                # Check if this should be an XDG config directory
                if [[ -f "$dir/config.yml" || -f "$dir/config.yaml" || -f "$dir/config.json" || \
                      -f "$dir/settings.json" || -f "$dir/settings.yml" || -f "$dir/config.toml" || \
                      -d "$dir/config" ]]; then
                    # This looks like an XDG config directory
                    mkdir -p "$HOME/.config/$dir_name"
                    echo "Linking to XDG config directory: $dir_name"
                    for file in "$dir"/* ; do
                        if [ -e "$file" ]; then
                            base_name=$(basename "$file")
                            link_file "$file" "$HOME/.config/$dir_name/$base_name"
                        fi
                    done
                else
                    # Standard dotfile - link to home with dot prefix
                    if [[ "$dir_name" != .* ]]; then
                        # Create dotfile directory in home if needed
                        if [ -d "$dir" ]; then
                            # Link entire directory with dot prefix
                            link_file "$dir" "$HOME/.$dir_name"
                        else
                            # Link individual files with dot prefix
                            for file in "$dir"/* ; do
                                if [ -e "$file" ]; then
                                    base_name=$(basename "$file")
                                    link_file "$file" "$HOME/.$dir_name/$base_name"
                                fi
                            done
                        fi
                    else
                        # Already has dot prefix, link directly
                        link_file "$dir" "$HOME/$dir_name"
                    fi
                fi

                echo "" >> "$SETUP_SCRIPT"
                ;;
        esac
    fi
done

# Process any top-level dotfiles
for file in "$DOTFILES_DIR"/* ; do
    if [ -f "$file" ]; then
        base_name=$(basename "$file")
        # Skip the install script itself and other special files
        if [[ "$base_name" != "install.sh" && "$base_name" != "README.md" && "$base_name" != "codespace_startup.sh" ]]; then
            # If filename starts with a dot, link directly, otherwise add a dot
            if [[ "$base_name" == .* ]]; then
                link_file "$file" "$HOME/$base_name"
            else
                link_file "$file" "$HOME/.$base_name"
            fi
        fi
    fi
done

# Make the setup script executable
chmod +x "$SETUP_SCRIPT"

# Ensure the setup script is sourced on login
for rcfile in "$HOME/.bashrc" "$HOME/.zshrc"; do
    if [ -f "$rcfile" ]; then
        if ! grep -q "source $SETUP_SCRIPT" "$rcfile"; then
            echo -e "\n# Source dotfiles setup script" >> "$rcfile"
            echo "if [ -f \"$SETUP_SCRIPT\" ]; then" >> "$rcfile"
            echo "    source \"$SETUP_SCRIPT\"" >> "$rcfile"
            echo "fi" >> "$rcfile"
        fi
    fi
done

# Create a Codespace specific startup file
CODESPACE_SCRIPT="$DOTFILES_DIR/codespace_startup.sh"
cat > "$CODESPACE_SCRIPT" << 'EOF'
#!/bin/bash

# This file gets automatically sourced in Codespaces
echo "Loading custom dotfiles configuration..."

# Add any Codespace-specific configuration here
EOF
chmod +x "$CODESPACE_SCRIPT"

echo -e "${GREEN}Dotfiles installation complete!${NC}"
echo -e "${GREEN}Configuration will be loaded automatically on next login or Codespace startup.${NC}"
