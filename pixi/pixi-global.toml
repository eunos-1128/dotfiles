version = 1

[envs.dssp]
channels = ["conda-forge"]
dependencies = { dssp = "*" }
exposed = { mkdssp = "mkdssp" }

[envs.git-lfs]
channels = ["conda-forge"]
dependencies = { git-lfs = "*" }
exposed = { git-lfs = "git-lfs" }

[envs.htop]
channels = ["conda-forge"]
dependencies = { htop = "*" }
exposed = { htop = "htop" }

[envs.ripgrep]
channels = ["conda-forge"]
dependencies = { ripgrep = "*" }
exposed = { rg = "rg" }

[envs.cb-clipboard]
channels = ["conda-forge"]
dependencies = { cb-clipboard = "*" }
exposed = { cb = "cb" }

[envs.gitoxide]
channels = ["conda-forge"]
dependencies = { gitoxide = "*" }
exposed = { ein = "ein", gix = "gix" }

[envs.xonsh]
channels = ["conda-forge"]
dependencies = { xonsh = "*" }
exposed = { xonsh = "xonsh", xonsh-cat = "xonsh-cat", xonsh-uname = "xonsh-uname", xonsh-uptime = "xonsh-uptime" }

[envs.dust]
channels = ["conda-forge"]
dependencies = { dust = "*" }
exposed = { dust = "dust" }

[envs.ncdu]
channels = ["conda-forge"]
dependencies = { ncdu = "*" }
exposed = { ncdu = "ncdu" }

[envs.zoxide]
channels = ["conda-forge"]
dependencies = { zoxide = "*" }
exposed = { zoxide = "zoxide" }

[envs.tokei]
channels = ["conda-forge"]
dependencies = { tokei = "*" }
exposed = { tokei = "tokei" }

[envs.ytop]
channels = ["conda-forge"]
dependencies = { ytop = "*" }
exposed = { ytop = "ytop" }

[envs.pdb-tools]
channels = ["conda-forge"]
dependencies = { pdb-tools = "*" }
exposed = { pdb_delchain = "pdb_delchain", pdb_shiftres = "pdb_shiftres", __init__ = "__init__", pdb_gap = "pdb_gap", pdb_chainbows = "pdb_chainbows", pdb_selmodel = "pdb_selmodel", pdb_sort = "pdb_sort", pdb_splitchain = "pdb_splitchain", pdb_uniqname = "pdb_uniqname", pdb_selelem = "pdb_selelem", pdb_chain = "pdb_chain", pdb_reatom = "pdb_reatom", pdb_segxchain = "pdb_segxchain", pdb_delhetatm = "pdb_delhetatm", pdb_b = "pdb_b", pdb_selseg = "pdb_selseg", pdb_chainxseg = "pdb_chainxseg", pdb_delinsertion = "pdb_delinsertion", pdb_keepcoord = "pdb_keepcoord", pdb_seg = "pdb_seg", pdb_mkensemble = "pdb_mkensemble", pdb_fromcif = "pdb_fromcif", pdb_merge = "pdb_merge", pdb_delresname = "pdb_delresname", pdb_fetch = "pdb_fetch", pdb_fixinsert = "pdb_fixinsert", pdb_delres = "pdb_delres", pdb_tofasta = "pdb_tofasta", pdb_tidy = "pdb_tidy", pdb_intersect = "pdb_intersect", pdb_wc = "pdb_wc", pdb_selaltloc = "pdb_selaltloc", pdb_delelem = "pdb_delelem", pdb_rplresname = "pdb_rplresname", pdb_rplchain = "pdb_rplchain", pdb_tocif = "pdb_tocif", pdb_element = "pdb_element", pdb_selhetatm = "pdb_selhetatm", pdb_selresname = "pdb_selresname", pdb_selchain = "pdb_selchain", pdb_validate = "pdb_validate", pdb_selres = "pdb_selres", pdb_splitmodel = "pdb_splitmodel", pdb_selatom = "pdb_selatom", pdb_reres = "pdb_reres", pdb_splitseg = "pdb_splitseg", pdb_occ = "pdb_occ", pdb_head = "pdb_head", pdb_chkensemble = "pdb_chkensemble" }

[envs.peco]
channels = ["conda-forge"]
dependencies = { peco = "*" }
exposed = { peco = "peco" }

[envs.tig]
channels = ["conda-forge"]
dependencies = { tig = "*" }
exposed = { tig = "tig" }

[envs.bat]
channels = ["conda-forge"]
dependencies = { bat = "*" }
exposed = { bat = "bat" }

[envs.git]
channels = ["conda-forge"]
dependencies = { git = "*" }
exposed = { git = "git", git-cvsserver = "git-cvsserver", git-receive-pack = "git-receive-pack", git-shell = "git-shell", git-upload-archive = "git-upload-archive", git-upload-pack = "git-upload-pack", gitk = "gitk", scalar = "scalar" }

[envs.imagemagick]
channels = ["conda-forge"]
dependencies = { imagemagick = "*" }
exposed = { "magick++-config" = "magick++-config", magickcore-config = "magickcore-config", magickwand-config = "magickwand-config", animate = "animate", compare = "compare", composite = "composite", conjure = "conjure", convert = "convert", display = "display", identify = "identify", import = "import", magick = "magick", magick-script = "magick-script", mogrify = "mogrify", montage = "montage", stream = "stream" }

[envs.potrace]
channels = ["bioconda"]
dependencies = { potrace = "*" }
exposed = { mkbitmap = "mkbitmap", potrace = "potrace" }

[envs.maxit]
channels = [
    "bioconda",
    "conda-forge",
]
dependencies = { maxit = "*" }
exposed = { maxit = "maxit", generate_assembly_cif_file = "generate_assembly_cif_file", process_entry = "process_entry" }

[envs.visidata]
channels = ["conda-forge"]
dependencies = { visidata = "*" }
exposed = { vd = "vd", visidata = "visidata" }

[envs.trash-cli]
channels = ["conda-forge"]
dependencies = { trash-cli = "*" }
exposed = { trash = "trash", trash-empty = "trash-empty", trash-list = "trash-list", trash-put = "trash-put", trash-restore = "trash-restore", trash-rm = "trash-rm" }

[envs.direnv]
channels = ["conda-forge"]
dependencies = { direnv = "*" }
exposed = { direnv = "direnv" }

[envs.ruff]
channels = ["conda-forge"]
dependencies = { ruff = "*" }
exposed = { ruff = "ruff" }

[envs.perl]
channels = ["conda-forge"]
dependencies = { perl = "*" }
exposed = { ptar = "ptar", shasum = "shasum", xsubpp = "xsubpp", corelist = "corelist", cpan = "cpan", enc2xs = "enc2xs", encguess = "encguess", h2ph = "h2ph", h2xs = "h2xs", instmodsh = "instmodsh", json_pp = "json_pp", libnetcfg = "libnetcfg", perl = "perl", "perl5.32.1" = "perl5.32.1", perlbug = "perlbug", perldoc = "perldoc", perlivp = "perlivp", perlthanks = "perlthanks", piconv = "piconv", pl2pm = "pl2pm", pod2html = "pod2html", pod2man = "pod2man", pod2text = "pod2text", pod2usage = "pod2usage", prove = "prove", ptardiff = "ptardiff", splain = "splain", zipdetails = "zipdetails", podchecker = "podchecker", ptargrep = "ptargrep", streamzip = "streamzip" }

[envs.juliaup]
channels = ["conda-forge"]
dependencies = { juliaup = "*" }
exposed = { julia = "julia", juliaup = "juliaup" }

[envs.gtop]
channels = ["conda-forge"]
dependencies = { gtop = "*" }
exposed = { gtop = "gtop" }

[envs.parallel]
channels = ["conda-forge"]
dependencies = { parallel = "*" }
exposed = { sem = "sem", env_parallel = "env_parallel", "env_parallel.ash" = "env_parallel.ash", "env_parallel.dash" = "env_parallel.dash", "env_parallel.mksh" = "env_parallel.mksh", "env_parallel.pdksh" = "env_parallel.pdksh", niceload = "niceload", parallel = "parallel", parcat = "parcat", parset = "parset", parsort = "parsort", sql = "sql" }

[envs.lazygit]
channels = ["conda-forge"]
dependencies = { lazygit = "*" }
exposed = { lazygit = "lazygit" }

[envs.conda-smithy]
channels = ["conda-forge"]
dependencies = { conda-smithy = "*" }
exposed = { feedstocks = "feedstocks", conda-smithy = "conda-smithy" }

[envs.nodejs]
channels = ["conda-forge"]
dependencies = { nodejs = "*" }
exposed = { corepack = "corepack", node = "node", npm = "npm", npx = "npx" }

[envs.pymol-open-source]
channels = ["conda-forge"]
dependencies = { pymol-open-source = "*" }
exposed = { pymol = "pymol" }

[envs.xsv]
channels = ["conda-forge"]
dependencies = { xsv = "*" }
exposed = { xsv = "xsv" }

[envs.mview]
channels = [
    "bioconda",
    "conda-forge",
]
dependencies = { mview = "*" }
exposed = { mview = "mview" }

[envs.zeromq]
channels = ["conda-forge"]
dependencies = { zeromq = "*" }
exposed = { curve_keygen = "curve_keygen" }

[envs.lfortran]
channels = ["conda-forge"]
dependencies = { lfortran = "*" }
exposed = { lfortran = "lfortran" }

[envs.euporie]
channels = ["conda-forge"]
dependencies = { euporie = "*" }
exposed = { euporie = "euporie", euporie-console = "euporie-console", euporie-notebook = "euporie-notebook", euporie-preview = "euporie-preview", euporie-hub = "euporie-hub" }

[envs.fzf]
channels = ["conda-forge"]
dependencies = { fzf = "*" }
exposed = { fzf = "fzf" }

[envs.ambertools]
channels = ["conda-forge"]
dependencies = { ambertools = "*" }
exposed = { addtobox = "addtobox", "process_mdout.perl" = "process_mdout.perl", py_resp = "py_resp", quick = "quick", resp = "resp", rism1d = "rism1d", "rism3d.snglpnt" = "rism3d.snglpnt", sander = "sander", saxs_md = "saxs_md", senergy = "senergy", sgldwt = "sgldwt", softcore_setup = "softcore_setup", sviol = "sviol", teleap = "teleap", ucpp = "ucpp", carthess2fc = "carthess2fc", chbox = "chbox", few = "few", ipmach = "ipmach", mcpb = "mcpb", mmpbsa = "mmpbsa", "mmpbsa.py.mpi" = "mmpbsa.py.mpi", optc4 = "optc4", pdbsearcher = "pdbsearcher", proscrs = "proscrs", proppdb = "proppdb", unitcell = "unitcell", xrayprep = "xrayprep", add_pdb = "add_pdb", add_xray = "add_xray", addles = "addles", am1bcc = "am1bcc", amb2chm_par = "amb2chm_par", amb2chm_psf_crd = "amb2chm_psf_crd", amb2gro_top_gro = "amb2gro_top_gro", ambmask = "ambmask", ambpdb = "ambpdb", ante-mmpbsa = "ante-mmpbsa", antechamber = "antechamber", atomtype = "atomtype", bar_pbsa = "bar_pbsa", bondtype = "bondtype", car_to_files = "car_to_files", ceinutil = "ceinutil", cestats = "cestats", charmmlipid2amber = "charmmlipid2amber", cpeinutil = "cpeinutil", cphstats = "cphstats", cpinutil = "cpinutil", cpptraj = "cpptraj", draw_membrane2 = "draw_membrane2", edgembar = "edgembar", edgembar-writegraphhtml = "edgembar-writegraphhtml", edgembar-amber2dats = "edgembar-amber2dats", elsize = "elsize", espgen = "espgen", finddgref = "finddgref", fitpkaeo = "fitpkaeo", fixremdcouts = "fixremdcouts", gbnsr6 = "gbnsr6", "gem.pmemd" = "gem.pmemd", genremdinputs = "genremdinputs", gwh = "gwh", hcp_getpdb = "hcp_getpdb", immers = "immers", makeang_rst = "makeang_rst", makechir_rst = "makechir_rst", "makecsa_rst.na" = "makecsa_rst.na", "makedip_rst.dna" = "makedip_rst.dna", "makedip_rst.protein" = "makedip_rst.protein", makedist_rst = "makedist_rst", makerigid_rst = "makerigid_rst", make_crd_hg = "make_crd_hg", mdgx = "mdgx", mdout2pymbar = "mdout2pymbar", mdout_analyzer = "mdout_analyzer", memembed = "memembed", metalpdb2mol2 = "metalpdb2mol2", metatwist = "metatwist", mm_pbsa = "mm_pbsa", mm_pbsa_nabnmode = "mm_pbsa_nabnmode", mm_pbsa_statistics = "mm_pbsa_statistics", mmpbsa_py_energy = "mmpbsa_py_energy", mmpbsa_py_nabnmode = "mmpbsa_py_nabnmode", mol2rtf = "mol2rtf", ndfes = "ndfes", ndfes-avgfess = "ndfes-avgfess", ndfes-checkequil = "ndfes-checkequil", ndfes-combinemetafiles = "ndfes-combinemetafiles", ndfes-ftsm-prepareanalysis = "ndfes-ftsm-prepareanalysis", ndfes-ftsm-prepareguess = "ndfes-ftsm-prepareguess", ndfes-ftsm-preparesims = "ndfes-ftsm-preparesims", ndfes-prepareamberdata = "ndfes-prepareamberdata", ndfes-printfes = "ndfes-printfes", ndfes-printstringfes = "ndfes-printstringfes", nef_to_rst = "nef_to_rst", nfe-umbrella-slice = "nfe-umbrella-slice", nmode = "nmode", packmol = "packmol", packmol-memgen = "packmol-memgen", paramfit = "paramfit", parmcal = "parmcal", parmchk2 = "parmchk2", pbsa = "pbsa", pdb4amber = "pdb4amber", prepgen = "prepgen", "process_minout.perl" = "process_minout.perl", pyresp_gen = "pyresp_gen", residuegen = "residuegen", respgen = "respgen", "rism3d.orave" = "rism3d.orave", "rism3d.thermo" = "rism3d.thermo", "sander.les" = "sander.les", saxs_rism = "saxs_rism", sgldinfo = "sgldinfo", simplepbsa = "simplepbsa", sqm = "sqm", sviol2 = "sviol2", test-api = "test-api", tinker_to_amber = "tinker_to_amber", tleap = "tleap", xaleap = "xaleap", xleap = "xleap" }

[envs.rattler-build]
channels = ["conda-forge"]
dependencies = { rattler-build = "*" }
exposed = { rattler-build = "rattler-build" }

[envs.xsel]
channels = ["conda-forge"]
dependencies = { xsel = "*" }
exposed = { xsel = "xsel" }

[envs.xclip]
channels = ["conda-forge"]
dependencies = { xclip = "*" }
exposed = { xclip = "xclip", xclip-copyfile = "xclip-copyfile", xclip-cutfile = "xclip-cutfile", xclip-pastefile = "xclip-pastefile" }

[envs.jupyterlab]
channels = ["conda-forge"]
dependencies = { jupyterlab = "*" }
exposed = { jupyter-lab = "jupyter-lab", jlpm = "jlpm", jupyter-labextension = "jupyter-labextension", jupyter-labhub = "jupyter-labhub" }

[envs.aria2]
channels = ["conda-forge"]
dependencies = { aria2 = "*" }
exposed = { aria2c = "aria2c" }

[envs.apptainer]
channels = ["conda-forge"]
dependencies = { apptainer = "*" }
exposed = { apptainer = "apptainer", run-singularity = "run-singularity", singularity = "singularity" }

[envs.podman]
channels = ["conda-forge"]
dependencies = { podman = "*" }
exposed = { podman = "podman", podman-remote = "podman-remote", podmansh = "podmansh" }

[envs.jq]
channels = ["conda-forge"]
dependencies = { jq = "*" }
exposed = { jq = "jq" }

[envs.gemmi]
channels = ["conda-forge"]
dependencies = { gemmi = "*" }
exposed = { gemmi = "gemmi" }

[envs.conda-recipe-manager]
channels = ["conda-forge"]
dependencies = { conda-recipe-manager = "*" }
exposed = { crm = "crm", conda-recipe-manager = "conda-recipe-manager" }

[envs.gh]
channels = ["conda-forge"]
dependencies = { gh = "*" }
exposed = { gh = "gh" }

[envs.reduce]
channels = [
    "bioconda",
    "conda-forge",
]
dependencies = { reduce = "*" }
exposed = { reduce = "reduce" }

[envs.pipx]
channels = ["conda-forge"]
dependencies = { pipx = "*" }
exposed = { pipx = "pipx" }

[envs.jupytext]
channels = ["conda-forge"]
dependencies = { jupytext = "*" }
exposed = { jupytext = "jupytext", jupytext-config = "jupytext-config" }

[envs.pdbfixer]
channels = ["conda-forge"]
dependencies = { pdbfixer = "*" }
exposed = { pdbfixer = "pdbfixer" }

[envs.sed]
channels = ["conda-forge"]
dependencies = { sed = "*" }
exposed = { sed = "sed" }

[envs.helix]
channels = ["conda-forge"]
dependencies = { helix = "*" }
exposed = { hx = "hx" }

[envs.fish]
channels = ["conda-forge"]
dependencies = { fish = "*" }
exposed = { fish = "fish", fish_indent = "fish_indent", fish_key_reader = "fish_key_reader" }

[envs.hyperfine]
channels = ["conda-forge"]
dependencies = { hyperfine = "*" }
exposed = { hyperfine = "hyperfine" }

[envs.eza]
channels = ["conda-forge"]
dependencies = { eza = "*" }
exposed = { eza = "eza" }

[envs.grayskull]
channels = ["anaconda"]
dependencies = { grayskull = "*" }
exposed = { conda-grayskull = "conda-grayskull", conda-greyskull = "conda-greyskull", grayskull = "grayskull", greyskull = "greyskull" }

[envs.git-delta]
channels = ["conda-forge"]
dependencies = { git-delta = "*" }
exposed = { delta = "delta" }

[envs.fd-find]
channels = ["conda-forge"]
dependencies = { fd-find = "*" }
exposed = { fd = "fd" }

[envs.cmake]
channels = ["conda-forge"]
dependencies = { cmake = "*" }
exposed = { ccmake = "ccmake", cmake = "cmake", cpack = "cpack", ctest = "ctest" }

[envs.cctbx-base]
channels = ["conda-forge"]
dependencies = { cctbx-base = "*" }
exposed = { "annlib.python" = "annlib.python", "boost.gcd" = "boost.gcd", "boost.lcm" = "boost.lcm", "boost.python" = "boost.python", "boost_adaptbx.divide_by_zero" = "boost_adaptbx.divide_by_zero", "boost_adaptbx.double_overflow" = "boost_adaptbx.double_overflow", "boost_adaptbx.inexact" = "boost_adaptbx.inexact", "boost_adaptbx.int_overflow" = "boost_adaptbx.int_overflow", "boost_adaptbx.nested_cpp_loops_with_check_signals" = "boost_adaptbx.nested_cpp_loops_with_check_signals", "boost_adaptbx.segmentation_fault" = "boost_adaptbx.segmentation_fault", "boost_adaptbx.show_environ_usage" = "boost_adaptbx.show_environ_usage", "boost_adaptbx.show_platform_info" = "boost_adaptbx.show_platform_info", "ccp4io.python" = "ccp4io.python", "cctbx.hklinfo" = "cctbx.hklinfo", "cctbx.hklviewer" = "cctbx.hklviewer", "cctbx.brehm_diederichs" = "cctbx.brehm_diederichs", "cctbx.cod_select_and_pickle" = "cctbx.cod_select_and_pickle", "cctbx.convert_ccp4_symop_lib" = "cctbx.convert_ccp4_symop_lib", "cctbx.data_viewer" = "cctbx.data_viewer", "cctbx.eltbx.show_fp_fdp" = "cctbx.eltbx.show_fp_fdp", "cctbx.euclidean_model_matching" = "cctbx.euclidean_model_matching", "cctbx.find_distances" = "cctbx.find_distances", "cctbx.getting_started" = "cctbx.getting_started", "cctbx.image_viewer" = "cctbx.image_viewer", "cctbx.lattice_symmetry" = "cctbx.lattice_symmetry", "cctbx.loggraph" = "cctbx.loggraph", "cctbx.make_install_hklviewer_chimerax" = "cctbx.make_install_hklviewer_chimerax", "cctbx.multiplicity_viewer" = "cctbx.multiplicity_viewer", "cctbx.patterson_map" = "cctbx.patterson_map", "cctbx.plot_anomalous_scattering" = "cctbx.plot_anomalous_scattering", "cctbx.precession_view" = "cctbx.precession_view", "cctbx.python" = "cctbx.python", "cctbx.show_systematic_absences" = "cctbx.show_systematic_absences", "cctbx.space_group_info" = "cctbx.space_group_info", "cctbx.structure_factor_timings" = "cctbx.structure_factor_timings", "cctbx.subgroups" = "cctbx.subgroups", "cctbx.suitename" = "cctbx.suitename", "cctbx.suitename_old" = "cctbx.suitename_old", "cctbx.sym_equiv_sites" = "cctbx.sym_equiv_sites", "cctbx.sys_abs_equiv_space_groups" = "cctbx.sys_abs_equiv_space_groups", "cctbx.version" = "cctbx.version", "cctbx.visualize_r_factors" = "cctbx.visualize_r_factors", "cctbx.wavelength_units" = "cctbx.wavelength_units", "cctbx.web.install" = "cctbx.web.install", "cctbx.wxpython" = "cctbx.wxpython", "cctbx_regression.test_nightly" = "cctbx_regression.test_nightly", "cctbx_website.extract_script_from_html_cctbx_doc" = "cctbx_website.extract_script_from_html_cctbx_doc", "cctbx_website.python" = "cctbx_website.python", "cma_es.python" = "cma_es.python", "crys3d.model_viewer" = "crys3d.model_viewer", "crys3d.python" = "crys3d.python", "crys3d.qttbx.view_structure" = "crys3d.qttbx.view_structure", "distl.find_active_area" = "distl.find_active_area", "distl.image_viewer" = "distl.image_viewer", "distl.mp_spotfinder_server_read_file" = "distl.mp_spotfinder_server_read_file", "distl.signal_strength" = "distl.signal_strength", "distl.sweep_strength" = "distl.sweep_strength", "distl.thin_client" = "distl.thin_client", "fable.cout" = "fable.cout", "fable.fem_include_search_paths" = "fable.fem_include_search_paths", "fable.insert_write_at_start_of_each_procedure" = "fable.insert_write_at_start_of_each_procedure", "fable.python" = "fable.python", "fable.read" = "fable.read", "fable.show_calls" = "fable.show_calls", "fable.split" = "fable.split", "gltbx.python" = "gltbx.python", "gltbx.try_imports" = "gltbx.try_imports", "iotbx.blast_pdb" = "iotbx.blast_pdb", "iotbx.build_phil_cache" = "iotbx.build_phil_cache", "iotbx.cbf_read" = "iotbx.cbf_read", "iotbx.cif.as_miller_arrays" = "iotbx.cif.as_miller_arrays", "iotbx.cif.as_xray_structure" = "iotbx.cif.as_xray_structure", "iotbx.cif.validate" = "iotbx.cif.validate", "iotbx.cif_as_mtz" = "iotbx.cif_as_mtz", "iotbx.cif_as_pdb" = "iotbx.cif_as_pdb", "iotbx.cns.reflection_reader" = "iotbx.cns.reflection_reader", "iotbx.cns.sdb_reader" = "iotbx.cns.sdb_reader", "iotbx.cns.transfer_crystal_symmetry" = "iotbx.cns.transfer_crystal_symmetry", "iotbx.crystal_symmetry_from_any" = "iotbx.crystal_symmetry_from_any", "iotbx.dano_as_amplitudes" = "iotbx.dano_as_amplitudes", "iotbx.distance_least_squares" = "iotbx.distance_least_squares", "iotbx.dtrek.to_cns" = "iotbx.dtrek.to_cns", "iotbx.emma" = "iotbx.emma", "iotbx.export_scalepack_unmerged" = "iotbx.export_scalepack_unmerged", "iotbx.fetch_pdb" = "iotbx.fetch_pdb", "iotbx.file_reader" = "iotbx.file_reader", "iotbx.french_wilson" = "iotbx.french_wilson", "iotbx.get_pubmed_citation" = "iotbx.get_pubmed_citation", "iotbx.lattice_symmetry" = "iotbx.lattice_symmetry", "iotbx.merging_statistics" = "iotbx.merging_statistics", "iotbx.mtz.dump" = "iotbx.mtz.dump", "iotbx.pdb.add_conformations" = "iotbx.pdb.add_conformations", "iotbx.pdb.as_xray_structure" = "iotbx.pdb.as_xray_structure", "iotbx.pdb.box_around_molecule" = "iotbx.pdb.box_around_molecule", "iotbx.pdb.flip_symmetric_amino_acids" = "iotbx.pdb.flip_symmetric_amino_acids", "iotbx.pdb.get_citation" = "iotbx.pdb.get_citation", "iotbx.pdb.insert_scale_records" = "iotbx.pdb.insert_scale_records", "iotbx.pdb.join_fragment_files" = "iotbx.pdb.join_fragment_files", "iotbx.pdb.link_as_geometry_restraints_edits" = "iotbx.pdb.link_as_geometry_restraints_edits", "iotbx.pdb.print_sequence" = "iotbx.pdb.print_sequence", "iotbx.pdb.show_connectivity" = "iotbx.pdb.show_connectivity", "iotbx.pdb.sort_atoms" = "iotbx.pdb.sort_atoms", "iotbx.pdb.split_models" = "iotbx.pdb.split_models", "iotbx.pdb.superpose_atoms_by_name" = "iotbx.pdb.superpose_atoms_by_name", "iotbx.pdb.superpose_centers_of_mass" = "iotbx.pdb.superpose_centers_of_mass", "iotbx.pdb_as_fasta" = "iotbx.pdb_as_fasta", "iotbx.pdb_labels_comparison" = "iotbx.pdb_labels_comparison", "iotbx.pdb_labels_diff" = "iotbx.pdb_labels_diff", "iotbx.pdb_remediator" = "iotbx.pdb_remediator", "iotbx.phil" = "iotbx.phil", "iotbx.poscar_as_xray_structure" = "iotbx.poscar_as_xray_structure", "iotbx.python" = "iotbx.python", "iotbx.r_free_flags_accumulation" = "iotbx.r_free_flags_accumulation", "iotbx.r_free_flags_as_cns" = "iotbx.r_free_flags_as_cns", "iotbx.r_free_flags_completion_simple" = "iotbx.r_free_flags_completion_simple", "iotbx.reflection_file_converter" = "iotbx.reflection_file_converter", "iotbx.reflection_file_editor" = "iotbx.reflection_file_editor", "iotbx.reflection_file_reader" = "iotbx.reflection_file_reader", "iotbx.shelx.as_cif" = "iotbx.shelx.as_cif", "iotbx.shelx.as_xray_structure" = "iotbx.shelx.as_xray_structure", "iotbx.shelx.dump_as_python" = "iotbx.shelx.dump_as_python", "iotbx.show_distances" = "iotbx.show_distances", "iotbx.simple_map_coefficients" = "iotbx.simple_map_coefficients", "iotbx.split_data_cif" = "iotbx.split_data_cif", "iotbx.symmetry_search" = "iotbx.symmetry_search", "iotbx.unique_with_biomt" = "iotbx.unique_with_biomt", "iotbx.xplor.map.show_summary" = "iotbx.xplor.map.show_summary", "labelit.png" = "labelit.png", "libtbx.add_from_future_import_division" = "libtbx.add_from_future_import_division", "libtbx.analyse_code_comments" = "libtbx.analyse_code_comments", "libtbx.any2unix" = "libtbx.any2unix", "libtbx.assert_line_count" = "libtbx.assert_line_count", "libtbx.assert_not_show_diff" = "libtbx.assert_not_show_diff", "libtbx.assert_stdin" = "libtbx.assert_stdin", "libtbx.assert_stdin_contains_strings" = "libtbx.assert_stdin_contains_strings", "libtbx.assert_stdin_does_not_contain_strings" = "libtbx.assert_stdin_does_not_contain_strings", "libtbx.assert_stdin_ends_with" = "libtbx.assert_stdin_ends_with", libtbx = "libtbx", "libtbx.bibtex" = "libtbx.bibtex", "libtbx.bootstrap" = "libtbx.bootstrap", "libtbx.bundle_as_exe" = "libtbx.bundle_as_exe", "libtbx.bundle_as_selfx" = "libtbx.bundle_as_selfx", "libtbx.check_libcpp" = "libtbx.check_libcpp", "libtbx.chunk" = "libtbx.chunk", "libtbx.clean_clutter" = "libtbx.clean_clutter", "libtbx.clear_paths" = "libtbx.clear_paths", "libtbx.configure" = "libtbx.configure", "libtbx.create_cctbx_bundle_for_installer" = "libtbx.create_cctbx_bundle_for_installer", "libtbx.create_install_script_bat" = "libtbx.create_install_script_bat", "libtbx.create_installer" = "libtbx.create_installer", "libtbx.create_mac_app" = "libtbx.create_mac_app", "libtbx.create_selfx" = "libtbx.create_selfx", "libtbx.create_unzipsfx" = "libtbx.create_unzipsfx", "libtbx.create_windows_exe" = "libtbx.create_windows_exe", "libtbx.dtrace" = "libtbx.dtrace", "libtbx.easy_qsub" = "libtbx.easy_qsub", "libtbx.env_run" = "libtbx.env_run", "libtbx.epydoc_run" = "libtbx.epydoc_run", "libtbx.exec" = "libtbx.exec", "libtbx.extract_code_from_txt" = "libtbx.extract_code_from_txt", "libtbx.find_clutter" = "libtbx.find_clutter", "libtbx.find_files" = "libtbx.find_files", "libtbx.find_in_repositories" = "libtbx.find_in_repositories", "libtbx.find_old_style_classes" = "libtbx.find_old_style_classes", "libtbx.find_pdb_mmcif_problems" = "libtbx.find_pdb_mmcif_problems", "libtbx.find_reserved_names" = "libtbx.find_reserved_names", "libtbx.find_under_build" = "libtbx.find_under_build", "libtbx.find_untested" = "libtbx.find_untested", "libtbx.find_unused_imports" = "libtbx.find_unused_imports", "libtbx.find_unused_imports_crude" = "libtbx.find_unused_imports_crude", "libtbx.gdb" = "libtbx.gdb", "libtbx.git_avoid_merges" = "libtbx.git_avoid_merges", "libtbx.help" = "libtbx.help", "libtbx.import_all_ext" = "libtbx.import_all_ext", "libtbx.import_all_python" = "libtbx.import_all_python", "libtbx.install" = "libtbx.install", "libtbx.install_conda" = "libtbx.install_conda", "libtbx.latex" = "libtbx.latex", "libtbx.line_count" = "libtbx.line_count", "libtbx.list_files" = "libtbx.list_files", "libtbx.list_modules" = "libtbx.list_modules", "libtbx.list_source_files_sorted_by_size" = "libtbx.list_source_files_sorted_by_size", "libtbx.make_dist" = "libtbx.make_dist", "libtbx.make_sphinx_html" = "libtbx.make_sphinx_html", "libtbx.nequal" = "libtbx.nequal", "libtbx.parallel_simple" = "libtbx.parallel_simple", "libtbx.path_utility" = "libtbx.path_utility", "libtbx.pdflatex" = "libtbx.pdflatex", "libtbx.phil" = "libtbx.phil", "libtbx.prime_factors_of" = "libtbx.prime_factors_of", "libtbx.printenv" = "libtbx.printenv", "libtbx.py_compile_all" = "libtbx.py_compile_all", "libtbx.python" = "libtbx.python", "libtbx.raise_exception_for_testing" = "libtbx.raise_exception_for_testing", "libtbx.refresh" = "libtbx.refresh", "libtbx.remote_processing" = "libtbx.remote_processing", "libtbx.remove_tree" = "libtbx.remove_tree", "libtbx.remove_unused_imports" = "libtbx.remove_unused_imports", "libtbx.resource_monitor_plot" = "libtbx.resource_monitor_plot", "libtbx.run_pickled_function" = "libtbx.run_pickled_function", "libtbx.run_tests_parallel" = "libtbx.run_tests_parallel", "libtbx.scons" = "libtbx.scons", "libtbx.seconds_since_the_epoch" = "libtbx.seconds_since_the_epoch", "libtbx.sge_available_slots" = "libtbx.sge_available_slots", "libtbx.sge_qstat_counts" = "libtbx.sge_qstat_counts", "libtbx.show_all_on_path" = "libtbx.show_all_on_path", "libtbx.show_bin_path" = "libtbx.show_bin_path", "libtbx.show_build_options" = "libtbx.show_build_options", "libtbx.show_build_path" = "libtbx.show_build_path", "libtbx.show_but_no_repr" = "libtbx.show_but_no_repr", "libtbx.show_commands" = "libtbx.show_commands", "libtbx.show_date_and_time" = "libtbx.show_date_and_time", "libtbx.show_dist_paths" = "libtbx.show_dist_paths", "libtbx.show_env" = "libtbx.show_env", "libtbx.show_environ_usage" = "libtbx.show_environ_usage", "libtbx.show_full_command_path" = "libtbx.show_full_command_path", "libtbx.show_host_and_user" = "libtbx.show_host_and_user", "libtbx.show_include_paths" = "libtbx.show_include_paths", "libtbx.show_lib_path" = "libtbx.show_lib_path", "libtbx.show_module_dependencies" = "libtbx.show_module_dependencies", "libtbx.show_number_of_processors" = "libtbx.show_number_of_processors", "libtbx.show_numeric_version" = "libtbx.show_numeric_version", "libtbx.show_numpy_version" = "libtbx.show_numpy_version", "libtbx.show_python_dependencies" = "libtbx.show_python_dependencies", "libtbx.show_python_sys_executable" = "libtbx.show_python_sys_executable", "libtbx.show_pythonpath" = "libtbx.show_pythonpath", "libtbx.show_repository_paths" = "libtbx.show_repository_paths", "libtbx.show_tests" = "libtbx.show_tests", "libtbx.show_variable_names" = "libtbx.show_variable_names", "libtbx.start_binary_bundle" = "libtbx.start_binary_bundle", "libtbx.start_process" = "libtbx.start_process", "libtbx.unpack_in_sources" = "libtbx.unpack_in_sources", "libtbx.valgrind" = "libtbx.valgrind", "libtbx.wait_for_file" = "libtbx.wait_for_file", "mmtbx.altloc_remediate" = "mmtbx.altloc_remediate", "mmtbx.apply_ncs_to_ligand" = "mmtbx.apply_ncs_to_ligand", "mmtbx.arginine_geometry" = "mmtbx.arginine_geometry", "mmtbx.bfactor_plot" = "mmtbx.bfactor_plot", "mmtbx.clashscore2" = "mmtbx.clashscore2", "mmtbx.density_modification" = "mmtbx.density_modification", "mmtbx.development.aev" = "mmtbx.development.aev", "mmtbx.development.electrons" = "mmtbx.development.electrons", "mmtbx.development.qscore" = "mmtbx.development.qscore", "mmtbx.development.validate_ligands" = "mmtbx.development.validate_ligands", "mmtbx.development.water_b_factors" = "mmtbx.development.water_b_factors", "mmtbx.distance_difference" = "mmtbx.distance_difference", "mmtbx.emringer_score" = "mmtbx.emringer_score", "mmtbx.estimate_bijvoet_ratio" = "mmtbx.estimate_bijvoet_ratio", "mmtbx.fft" = "mmtbx.fft", "mmtbx.find_peaks_holes" = "mmtbx.find_peaks_holes", "mmtbx.find_residue_in_pdb" = "mmtbx.find_residue_in_pdb", "mmtbx.holton_geometry_validation" = "mmtbx.holton_geometry_validation", "mmtbx.hydrogenate" = "mmtbx.hydrogenate", "mmtbx.massage_data" = "mmtbx.massage_data", "mmtbx.matthews" = "mmtbx.matthews", "mmtbx.model_vs_data" = "mmtbx.model_vs_data", "mmtbx.mon_lib_cif_triage" = "mmtbx.mon_lib_cif_triage", "mmtbx.mp_geo" = "mmtbx.mp_geo", "mmtbx.nonbonded_overlaps" = "mmtbx.nonbonded_overlaps", "mmtbx.pdb_interpretation" = "mmtbx.pdb_interpretation", "mmtbx.pdb_statistics" = "mmtbx.pdb_statistics", "mmtbx.plan_sad_experiment" = "mmtbx.plan_sad_experiment", "mmtbx.prepare_pdb_deposition" = "mmtbx.prepare_pdb_deposition", "mmtbx.probe2" = "mmtbx.probe2", "mmtbx.process_predicted_model" = "mmtbx.process_predicted_model", "mmtbx.prune_model" = "mmtbx.prune_model", "mmtbx.python" = "mmtbx.python", "mmtbx.quantum_interface" = "mmtbx.quantum_interface", "mmtbx.rama_z" = "mmtbx.rama_z", "mmtbx.rebuild_cablam_cache" = "mmtbx.rebuild_cablam_cache", "mmtbx.rebuild_rotarama_cache" = "mmtbx.rebuild_rotarama_cache", "mmtbx.reduce2" = "mmtbx.reduce2", "mmtbx.refine_anomalous_substructure" = "mmtbx.refine_anomalous_substructure", "mmtbx.ribbons" = "mmtbx.ribbons", "mmtbx.rigid_bond_test" = "mmtbx.rigid_bond_test", "mmtbx.ringer" = "mmtbx.ringer", "mmtbx.search_pdb_symmetry" = "mmtbx.search_pdb_symmetry", "mmtbx.select_best_starting_model" = "mmtbx.select_best_starting_model", "mmtbx.show_r_factors_by_shell" = "mmtbx.show_r_factors_by_shell", "mmtbx.ss_idealization" = "mmtbx.ss_idealization", "mmtbx.super" = "mmtbx.super", "mmtbx.superpose" = "mmtbx.superpose", "mmtbx.table_one" = "mmtbx.table_one", "mmtbx.undowser2_validation" = "mmtbx.undowser2_validation", "mmtbx.validation_summary" = "mmtbx.validation_summary", "mmtbx.verify_mon_lib_data" = "mmtbx.verify_mon_lib_data", "mmtbx.xtriage" = "mmtbx.xtriage", "mmtbx.xtriage_gui" = "mmtbx.xtriage_gui", "molprobity.barbed_wire_analysis" = "molprobity.barbed_wire_analysis", "molprobity.cablam" = "molprobity.cablam", "molprobity.cbetadev" = "molprobity.cbetadev", "molprobity.chiral_validation" = "molprobity.chiral_validation", "molprobity.clashscore" = "molprobity.clashscore", "molprobity.clashscore2" = "molprobity.clashscore2", "molprobity.kinemage" = "molprobity.kinemage", "molprobity.molprobity" = "molprobity.molprobity", "molprobity.omegalyze" = "molprobity.omegalyze", "molprobity.probescore_ligand" = "molprobity.probescore_ligand", "molprobity.ramalyze" = "molprobity.ramalyze", "molprobity.rna_validate" = "molprobity.rna_validate", "molprobity.rna_validate_bonds" = "molprobity.rna_validate_bonds", "molprobity.rna_validate_puckers" = "molprobity.rna_validate_puckers", "rstbx.index" = "rstbx.index", "molprobity.rna_validate_suites" = "molprobity.rna_validate_suites", "molprobity.rotalyze" = "molprobity.rotalyze", "molprobity.suitename" = "molprobity.suitename", "molprobity.suitename_old" = "molprobity.suitename_old", "molprobity.undowser2_validation" = "molprobity.undowser2_validation", "molprobity.undowser_validation" = "molprobity.undowser_validation", "omptbx.python" = "omptbx.python", "phasertng.hklviewer" = "phasertng.hklviewer", "rstbx.python" = "rstbx.python", "rstbx.simage.create" = "rstbx.simage.create", "rstbx.simage.explore_completeness" = "rstbx.simage.explore_completeness", "rstbx.simage.solver" = "rstbx.simage.solver", "rstbx.simage.wx_display" = "rstbx.simage.wx_display", "samosa.join" = "samosa.join", "samosa.scale" = "samosa.scale", "scitbx.apply_tapenade_hints" = "scitbx.apply_tapenade_hints", "scitbx.generate_error_h" = "scitbx.generate_error_h", "scitbx.histogram" = "scitbx.histogram", "scitbx.python" = "scitbx.python", "scitbx.show_exp_times" = "scitbx.show_exp_times", "scitbx.show_sizes" = "scitbx.show_sizes", "scitbx.unicode_examples" = "scitbx.unicode_examples", "serialtbx.python" = "serialtbx.python", "smtbx.absolute_structure" = "smtbx.absolute_structure", "smtbx.anom_refine" = "smtbx.anom_refine", "smtbx.benchmark_refinement" = "smtbx.benchmark_refinement", "smtbx.masks" = "smtbx.masks", "smtbx.python" = "smtbx.python", "smtbx.refine" = "smtbx.refine", "sphinx.build" = "sphinx.build", "spotfinder.python" = "spotfinder.python", "wxtbx.anomalous_differences_histogram" = "wxtbx.anomalous_differences_histogram", "wxtbx.inspect_r_free_flags" = "wxtbx.inspect_r_free_flags", "wxtbx.plan_sad_experiment" = "wxtbx.plan_sad_experiment", "wxtbx.python" = "wxtbx.python", "wxtbx.show_file_info" = "wxtbx.show_file_info", "wxtbx.xtriage" = "wxtbx.xtriage" }

[envs.dockq]
channels = [
    "bioconda",
    "conda-forge",
]
dependencies = { dockq = "*" }
exposed = { dockq = "dockq" }

[envs.zsh]
channels = ["conda-forge"]
dependencies = { zsh = "*" }
exposed = { zsh = "zsh", "zsh-5.9" = "zsh-5.9" }

[envs.screenfetch]
channels = ["conda-forge"]
dependencies = { screenfetch = "*" }
exposed = { screenfetch = "screenfetch" }

[envs.bfg]
channels = ["conda-forge"]
dependencies = { bfg = "*" }
exposed = { bfg = "bfg" }

[envs.lazydocker]
channels = ["conda-forge"]
dependencies = { lazydocker = "*" }
exposed = { lazydocker = "lazydocker" }

[envs.tmux]
channels = ["conda-forge"]
dependencies = { tmux = "*" }
exposed = { tmux = "tmux" }

[envs.pandoc]
channels = ["conda-forge"]
dependencies = { pandoc = "*" }
exposed = { pandoc = "pandoc", pandoc-lua = "pandoc-lua", pandoc-server = "pandoc-server" }

[envs.asciidoctor]
channels = ["conda-forge"]
dependencies = { asciidoctor = "*" }
exposed = { asciidoctor = "asciidoctor" }

[envs.blast]
channels = [
    "bioconda",
    "conda-forge",
]
dependencies = { blast = "*" }
exposed = { blast_formatter = "blast_formatter", blastdb_aliastool = "blastdb_aliastool", blastdbcheck = "blastdbcheck", blastdbcmd = "blastdbcmd", blastn = "blastn", blastn_vdb = "blastn_vdb", blastp = "blastp", blastx = "blastx", cleanup-blastdb-volumes = "cleanup-blastdb-volumes", convert2blastmask = "convert2blastmask", datatool = "datatool", deltablast = "deltablast", dustmasker = "dustmasker", get_species_taxids = "get_species_taxids", legacy_blast = "legacy_blast", makeblastdb = "makeblastdb", makembindex = "makembindex", makeprofiledb = "makeprofiledb", project_tree_builder = "project_tree_builder", psiblast = "psiblast", rpsblast = "rpsblast", rpstblastn = "rpstblastn", run_with_lock = "run_with_lock", segmasker = "segmasker", tblastn = "tblastn", tblastn_vdb = "tblastn_vdb", tblastx = "tblastx", test_pcre = "test_pcre", update_blastdb = "update_blastdb", windowmasker = "windowmasker", "windowmasker_2.2.22_adapter" = "windowmasker_2.2.22_adapter" }

[envs.lpython]
channels = ["conda-forge"]
dependencies = { lpython = "*" }
exposed = { lpython = "lpython" }

[envs.dua-cli]
channels = ["conda-forge"]
dependencies = { dua-cli = "*" }
exposed = { dua = "dua" }

[envs.diskus]
channels = ["conda-forge"]
dependencies = { diskus = "*" }
exposed = { diskus = "diskus" }

[envs.numbat]
channels = ["conda-forge"]
dependencies = { numbat = "*" }
exposed = { numbat = "numbat" }

[envs.google-cloud-sdk]
channels = ["conda-forge"]
dependencies = { google-cloud-sdk = "*" }
exposed = { bq = "bq", docker-credential-gcloud = "docker-credential-gcloud", gcloud = "gcloud", gsutil = "gsutil" }

[envs.rename]
channels = ["bioconda", "conda-forge"]
dependencies = { rename = "*" }
exposed = { rename = "rename" }

[envs.ollama]
channels = ["conda-forge"]
dependencies = { ollama = "*" }
exposed = { ollama = "ollama" }

[envs.foldseek]
channels = ["bioconda", "conda-forge"]
dependencies = { foldseek = "*" }
exposed = { foldseek = "foldseek" }

[envs.ruby]
channels = ["conda-forge"]
dependencies = { ruby = "*" }
exposed = { bundle = "bundle", bundler = "bundler", erb = "erb", gem = "gem", irb = "irb", racc = "racc", rake = "rake", rbs = "rbs", rdbg = "rdbg", rdoc = "rdoc", ri = "ri", ruby = "ruby", syntax_suggest = "syntax_suggest", typeprof = "typeprof" }

[envs.shell]
channels = ["conda-forge"]
dependencies = { shell = "*" }
exposed = { shell = "shell" }

[envs.zellij]
channels = ["conda-forge"]
dependencies = { zellij = "*" }
exposed = { zellij = "zellij" }

[envs.nvim]
channels = ["conda-forge"]
dependencies = { nvim = "*" }
exposed = { nvim = "nvim" }

[envs.ranger-fm]
channels = ["conda-forge"]
dependencies = { ranger-fm = "*" }
exposed = { ranger = "ranger", rifle = "rifle" }

[envs.rust]
channels = ["conda-forge"]
dependencies = { rust = "*" }
exposed = { cargo = "cargo", cargo-clippy = "cargo-clippy", cargo-fmt = "cargo-fmt", clippy-driver = "clippy-driver", rls = "rls", rust-analyzer = "rust-analyzer", rust-gdb = "rust-gdb", rust-gdbgui = "rust-gdbgui", rust-lldb = "rust-lldb", rustc = "rustc", rustdoc = "rustdoc", rustfmt = "rustfmt" }

[envs.jj]
channels = ["conda-forge"]
dependencies = { jj = "*" }
exposed = { jj = "jj" }

[envs.fastfetch]
channels = ["conda-forge"]
dependencies = { fastfetch = "*" }
exposed = { fastfetch = "fastfetch", flashfetch = "flashfetch" }

[envs.conda-build]
channels = ["conda-forge"]
dependencies = { conda-build = "*" }
exposed = { conda-build = "conda-build", conda-convert = "conda-convert", conda-debug = "conda-debug", conda-develop = "conda-develop", conda-inspect = "conda-inspect", conda-metapackage = "conda-metapackage", conda-render = "conda-render", conda-skeleton = "conda-skeleton" }

[envs.cctbx]
channels = ["conda-forge"]
dependencies = { cctbx = "*" }

[envs.gcc]
channels = ["conda-forge"]
dependencies = { gcc = "*" }
exposed = { cc = "cc", cpp = "cpp", gcc = "gcc", gcc-ar = "gcc-ar", gcc-nm = "gcc-nm", gcc-ranlib = "gcc-ranlib", gcov = "gcov", gcov-dump = "gcov-dump", gcov-tool = "gcov-tool" }

[envs.gxx]
channels = ["conda-forge"]
dependencies = { gxx = "*" }
exposed = { "c++" = "c++", "g++" = "g++" }

[envs.anaconda-client]
channels = ["conda-forge"]
dependencies = { anaconda-client = "*" }
exposed = { binstar = "binstar", conda-server = "conda-server" }

[envs.rainfrog]
channels = ["conda-forge"]
dependencies = { rainfrog = "*" }
exposed = { rainfrog = "rainfrog" }

[envs.quetz]
channels = ["conda-forge"]
dependencies = { quetz = "*" }
exposed = { quetz = "quetz" }

[envs.openstructure]
channels = ["conda-forge", "bioconda"]
dependencies = { openstructure = "*" }
exposed = { ".openstructure-post-link" = ".openstructure-post-link", chemdict_tool = "chemdict_tool", dng = "dng", lddt = "lddt", molck = "molck", ost = "ost", tmalign = "tmalign", tmscore = "tmscore" }

[envs.vmd]
channels = ["conda-forge"]
dependencies = { vmd = "*" }
exposed = { vmd = "vmd" }

[envs.modeller]
channels = ["salilab", "conda-forge"]
dependencies = { modeller = "*" }
exposed = { ".modeller-post-link" = ".modeller-post-link", "mod10.7" = "mod10.7" }

[envs.breezy]
channels = ["conda-forge"]
dependencies = { breezy = "*" }
exposed = { brz = "brz", bzr-receive-pack = "bzr-receive-pack", bzr-upload-pack = "bzr-upload-pack", git-remote-bzr = "git-remote-bzr" }

[envs.zed]
channels = ["conda-forge"]
dependencies = { zed = "*" }
exposed = { zed = "zed" }
shortcuts = ["zed"]

[envs.uv]
channels = ["conda-forge"]
dependencies = { uv = "*" }
exposed = { uv = "uv", uvx = "uvx" }

[envs.codex]
channels = ["conda-forge"]
dependencies = { codex = "*" }
exposed = { codex = "codex" }

