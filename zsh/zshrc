setopt PROMPT_SUBST

# カラー設定
autoload -Uz colors && colors

# コマンド補完機能
autoload -U compinit && compinit -u

precmd() {
    local short_hostname=$(hostname | awk -F. '{print $1}')

    print -Pn "\n%B%F{black}<%D{%Y-%m-%d} %T>%f%b %B%F{magenta}${short_hostname}%f%b:%B%F{blue}%~%f%b\n"
    branch_name=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [[ -n ${branch_name} ]]; then
	    BRANCH="%B%F{red}[$(git rev-parse --abbrev-ref HEAD 2>/dev/null)]%f%b"
    else
        BRANCH=""
    fi

    if [[ -n ${CONDA_DEFAULT_ENV} ]]; then
        CONDA_ENV="%B%F{yellow}(${CONDA_DEFAULT_ENV})%f%b"
    else
        CONDA_ENV=""
    fi
    PS1="${CONDA_ENV:+${CONDA_ENV} }${BRANCH:+${BRANCH} }%B%F{white}%#%f%b "
}

# エイリアス
alias ll='ls -l'
alias la='ls -a'
alias his='history'
alias ...='cd ../..'
alias ....='cd ../../..'
alias e="emacs"
alias v='vim'
alias vi='vim'
alias mss='mysql.server start'
alias so='source'
alias be='bundle exec'
alias ber='bundle exec ruby'

# エイリアス: git 系
alias g='git'
alias gs='git status'
alias gb='git branch'
alias gc='git checkout'
alias gct='git commit'
alias gg='git grep'
alias ga='git add'
alias gd='git diff'
alias gl='git log'
alias gcma='git checkout master'
alias gfu='git fetch upstream'
alias gfo='git fetch origin'
alias gmod='git merge origin/develop'
alias gmud='git merge upstream/develop'
alias gmom='git merge origin/master'
alias gcm='git commit -m'
alias gpo='git push origin'
alias gpom='git push origin master'
alias gst='git stash'
alias gsl='git stash list'
alias gsu='git stash -u'
alias gsp='git stash pop'

# 色を使用出来るようにする
autoload -Uz colors
colors

# ファイルタイプごとに太字を設定するための例
export LS_COLORS="di=1;34:ln=1;36:so=1;35:pi=1;33:ex=1;32:bd=1;33;01:cd=1;33;01:su=1;37;41:sg=1;30;43:tw=1;30;42:ow=1;34;42:"

# ls コマンドのエイリアスを設定
alias ls='ls --color=auto'


# 日本語ファイル名を表示可能にする
setopt print_eight_bit

# cd なしでもディレクトリ移動
setopt auto_cd

# ビープ音の停止
setopt no_beep

# ビープ音の停止(補完時)
setopt nolistbeep

# cd [TAB] で以前移動したディレクトリを表示
setopt auto_pushd

# ヒストリ (履歴) を保存、数を増やす
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000

# 同時に起動した zsh の間でヒストリを共有する
setopt share_history

# 直前と同じコマンドの場合はヒストリに追加しない
setopt hist_ignore_dups

# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups

# スペースから始まるコマンド行はヒストリに残さない
setopt hist_ignore_space

# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks

# キーバインディングを emacs 風にする
bindkey -d
bindkey -e

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# [TAB] でパス名の補完候補を表示したあと、
# 続けて [TAB] を押すと候補からパス名を選択できるようになる
# 候補を選ぶには [TAB] か Ctrl-N,B,F,P
zstyle ':completion:*:default' menu select=1

# コマンドのスペルを訂正する
setopt correct

# cd した先のディレクトリをディレクトリスタックに追加する
# cd [TAB] でディレクトリのヒストリが表示されるので、選択して移動できる
# ※ ディレクトリスタック: 今までに行ったディレクトリのヒストリのこと
setopt auto_pushd

# pushd したとき、ディレクトリがすでにスタックに含まれていればスタックに追加しない
setopt pushd_ignore_dups

# 拡張 glob を有効にする
# 拡張 glob を有効にすると # ~ ^ もパターンとして扱われる
# glob: パス名にマッチするワイルドカードパターンのこと
# ※ たとえば mv hoge.* ~/dir というコマンドにおける * のこと
setopt extended_glob

# 単語の一部として扱われる文字のセットを指定する
# ここではデフォルトのセットから / を抜いたものにしている
# ※ たとえば Ctrl-W でカーソル前の1単語を削除したとき / までで削除が止まる
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

export PATH="/opt/programs:$PATH"
export PATH="/home/pg01_ueno/.local/bin:$PATH"
export PATH="/home/pl03/bin:$PATH"
export JUPYTER_RUNTIME_DIR=/tmp

# >>> mamba initialize >>>
# !! Contents within this block are managed by 'mamba init' !!
export MAMBA_EXE='/home/pg01_ueno.org/.local/bin/micromamba';
export MAMBA_ROOT_PREFIX='/home/pg01_ueno.org/micromamba';
__mamba_setup="$("$MAMBA_EXE" shell hook --shell bash --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    alias micromamba="$MAMBA_EXE"  # Fallback on help from mamba activate
fi
unset __mamba_setup
# <<< mamba initialize <<<

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/uenom/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/uenom/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/uenom/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/uenom/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "/home/uenom/miniconda3/etc/profile.d/mamba.sh" ]; then
    . "/home/uenom/miniconda3/etc/profile.d/mamba.sh"
fi
# <<< conda initialize <<<

# >>> juliaup initialize >>>

# !! Contents within this block are managed by juliaup !!

case ":$PATH:" in
    *:/home/uenom/.juliaup/bin:*)
        ;;

    *)
        export PATH=/home/uenom/.juliaup/bin${PATH:+:${PATH}}
        ;;
esac

# <<< juliaup initialize <<<

. "$HOME/.cargo/env"

export PATH="/home/uenom/ADFRsuite-1.1dev/ADFRsuite_x86_64Linux_1.1dev/ADFRsuite-1.1dev/bin:$PATH"
source "$HOME/.rye/env"
PATH="/home/uenom/.local/bin:$PATH"
if [[ ! -f $HOME/.zi/bin/zi.zsh ]]; then
  print -P "%F{33}▓▒░ %F{160}Installing (%F{33}z-shell/zi%F{160})…%f"
  command mkdir -p "$HOME/.zi" && command chmod go-rwX "$HOME/.zi"
  command git clone -q --depth=1 --branch "main" https://github.com/z-shell/zi "$HOME/.zi/bin" && \
    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi
source "$HOME/.zi/bin/zi.zsh"
autoload -Uz _zi
(( ${+_comps} )) && _comps[zi]=_zi
# examples here -> https://wiki.zshell.dev/ecosystem/category/-annexes
zicompinit # <- https://wiki.zshell.dev/docs/guides/commands

# local::libを使用する設定
eval "$(perl -I$HOME/.perl5/lib/perl5 -Mlocal::lib=$HOME/.perl5)"
export PERL_MM_OPT="INSTALL_BASE=$HOME/.perl5"
export PERL_MB_OPT="--install_base $HOME/.perl5"
export PERL5LIB="$HOME/.perl5/lib/perl5:$PERL5LIB"
export PATH="$HOME/.perl5/bin:$PATH"
